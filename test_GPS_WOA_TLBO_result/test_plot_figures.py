import numpy as np
from scipy import linalg
import math
from calc_links_transform import calc_links_transform
from cross import cross
from calc_zyx2quaternion import calc_zyx2quaternion
from calc_quaternion2dc import calc_quaternion2dc
from calc_r import calc_r
from calc_p import calc_p
from calc_J_bm import calc_J_bm
from calc_J_bE import calc_J_bE
from f_tau_vel import f_tau_vel
from f_tau_acc import f_tau_acc
from calc_quaternion2euler import calc_quaternion2euler
import random
from Bezier_calc_forward_kinematics import Bezier_calc_forward_kinematics
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from text_save import text_save

# 1.45255  0.582277  -4.71239  -2.53748  0.37137  -1.05957  -1.18588
# 4.03593  2.07478  -0.524677  3.88819  -3.3793  1.00443  2.00418
# 4.31671  2.69135  -2.20588  3.59821  4.49233  1.35774  1.80534
# 0.722395  0.761997  -2.55144  -2.4332  -0.416011  -0.548901  -2.55447
# 4.25027  2.6069  1.96688  2.60097  1.77514  1.01753  -0.0298148
# 3.42159  2.62972  1.25233  -2.30419  -0.749787  -0.610713  -2.65386
# 0.840216  0.154529  -1.25516  -2.8869  -0.560049  -2.0944  -3.89908

# 1.82072  0.587827  1.0189  4.33098  -3.20266  1.06863  5.27103
# 1.23848  0.400183  -0.838996  2.94077  1.44408  -2.0944  -1.96748
# -5.41005  0.369534  -3.36115  -3.11444  4.028  -1.93586  -1.97808
# -5.55094  0.294247  -3.75749  -3.46536  -4.96809  1.86399  -5.29003
# P_i3 = np.array([
#     [-5.41005],
#     [0.369534],
#     [-3.36115],
#     [-3.11444],
#     [4.028],
#     [-1.93586],
#     [-1.97808]
# ])
# P_i3 = np.array([
#     [-5.55094],
#     [0.294247],
#     [-3.75749],
#     [-3.46536],
#     [-4.96809],
#     [1.86399],
#     [-5.29003]
# ])

# 0.963241  0.0785842  3.3368  2.76738  0.495218  1.82749  1.15556
# P_i3 = np.array([
#     [0.963241],
#     [0.0785842],
#     [3.3368],
#     [2.76738],
#     [0.495218],
#     [1.82749],
#     [1.15556]
# ])

# -5.36749  0.509185  0.581829  3.00116  -6.2445  -2.091  -2.03077
# P_i3 = np.array([
#     [-5.36749],
#     [0.509185],
#     [0.581829],
#     [3.00116],
#     [-6.2445],
#     [-2.091],
#     [-2.03077]
# ])

# 1.05399  0.115049  6.01141  3.55558  0.873924  -1.95121  4.12202
# P_i3 = np.array([
#     [1.05399],
#     [0.115049],
#     [6.01141],
#     [3.55558],
#     [0.873924],
#     [-1.95121],
#     [4.12202]
# ])

# 0.958533  0.276001  3.25543  2.9958  3.77547  -1.90394  -2.01292
# P_i3 = np.array([
#     [0.958533],
#     [0.276001],
#     [3.25543],
#     [2.9958],
#     [3.77547],
#     [-1.90394],
#     [-2.01292]
# ])

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 0.874224  0.337685  2.61438  2.92758  -1.90856  -1.91144  4.211  #  18.9
# P_i3 = np.array([
#     [0.874224],
#     [0.337685],
#     [2.61438],
#     [2.92758],
#     [-1.90856],
#     [-1.91144],
#     [4.211]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.47432377]
#  [-1.39875563]
#  [ 2.24036618]]
# eta_end:  [[0.83541414]]
# xi_end:  [[-0.06797499]
#  [-0.49005252]
#  [ 0.23939745]]
# alpha_end, beta_end, gamma_end:  -0.5986476699345095 -0.9047124911204955 0.855879634008918
# alpha_end, beta_end, gamma_end:  -34.299984902588136 -51.83620741397135 49.03829079991256
# final base state:
# eta_b:  [[0.9999246]]
# xi_b:  [[-0.00039799]
#  [ 0.01227293]
#  [-0.00013907]]
# alpha_base, beta_base, gamma_base:  -0.0007995779795174987 0.024546372874707748 -0.0002879746280943826
# alpha_base, beta_base, gamma_base:  -0.045812443617950456 1.4064035680751599 -0.016499730796657626
# manipulability:  0.9718620915039194
# T_f:  [90.44243986]
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# *******************************************  GOOD RESULT ***********************************************************************
# woa_tlbo_fitness:  55.153
# 1.04015  0.653164  2.80283  3.63209  1.10744  2.03651  1.36909
# P_i3 = np.array([
#     [1.04015],
#     [0.653164],
#     [2.80283],
#     [3.63209],
#     [1.10744],
#     [2.03651],
#     [1.36909]
# ])
#
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.49139144]
#  [-1.39649959]
#  [ 2.17525736]]
# eta_end:  [[0.84270582]]
# xi_end:  [[-0.04240818]
#  [-0.48320663]
#  [ 0.23358039]]
# alpha_end, beta_end, gamma_end:  -0.5115402186677773 -0.9183330426308837 0.7979298285139549
# alpha_end, beta_end, gamma_end:  -29.309095580862884 -52.61660753015713 45.71801152144715
# final base state:
# eta_b:  [[0.99992968]]
# xi_b:  [[ 0.00071532]
#  [ 0.01176775]
#  [-0.00127952]]
# alpha_base, beta_base, gamma_base:  0.0014008178284588124 0.02353784611394988 -0.0025427383630863827
# alpha_base, beta_base, gamma_base:  0.08026094943737089 1.3486192411577338 -0.14568817661085326
# manipulability:  1.0800089127349117
# T_f:  [78.00880584]
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ***************************************************************************************************************************************************************************
# woa_tlbo_fitness:  20.6177
# 1.10503  0.305979  -0.891228  3.22986  4.63105  2.09322  1.01121
# P_i3 = np.array([
#     [1.10503],
#     [0.305979],
#     [-0.891228],
#     [3.22986],
#     [4.63105],
#     [2.09322],
#     [1.01121]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.5160444 ]
#  [-1.34776121]
#  [ 2.2705215 ]]
# eta_end:  [[0.83372113]]
# xi_end:  [[-0.05060864]
#  [-0.50001128]
#  [ 0.22877185]]
# alpha_end, beta_end, gamma_end:  -0.5642171796695838 -0.945149134060897 0.8298097206356975
# alpha_end, beta_end, gamma_end:  -32.32726312384163 -54.153056392133834 47.54459479135536
# final base state:
# eta_b:  [[0.99986131]]
# xi_b:  [[ 0.00827454]
#  [-0.00844318]
#  [-0.01173092]]
# alpha_base, beta_base, gamma_base:  0.01674799139961131 -0.016690660047211103 -0.023603782092103284
# alpha_base, beta_base, gamma_base:  0.9595892225191286 -0.9563043779928195 -1.3523970944239907
# manipulability:  0.6836538242331565
# T_f:  [99.4641323]
# ===================================================================================================================================================
# woa_tlbo_fitness:  50.2714
# 3.88194  2.95606  1.66151  3.46635  5.48023  2.03536  1.23436
# P_i3 = np.array([
#     [3.88194],
#     [2.95606],
#     [1.66151],
#     [3.46635],
#     [5.48023],
#     [2.03536],
#     [1.23436]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.47649984]
#  [-1.34947163]
#  [ 2.16452993]]
# eta_end:  [[-0.81581906]]
# xi_end:  [[ 0.01774366]
#  [ 0.51581802]
#  [-0.2608758 ]]
# alpha_end, beta_end, gamma_end:  -0.5678701156716728 -0.9833713564276082 0.9290544744418544
# alpha_end, beta_end, gamma_end:  -32.53656093959272 -56.343028417356926 53.23090032326307
# final base state:
# eta_b:  [[0.99887319]]
# xi_b:  [[-0.01506475]
#  [-0.04317997]
#  [-0.01268412]]
# alpha_base, beta_base, gamma_base:  -0.02911372971075185 -0.0867535771758076 -0.024131752686280573
# alpha_base, beta_base, gamma_base:  -1.668093838310712 -4.9706138298362434 -1.3826475811773637
# manipulability:  0.388415590386645
# T_f:  [117.70253436]
# ===================================================================================================================================================
# woa_tlbo_fitness:  21.6637
# -5.59628  0.401281  -4.16633  -3.39678  -1.46862  -1.99882  -2.13589
# P_i3 = np.array([
#     [5.59628],
#     [0.401281],
#     [-4.16633],
#     [-3.39678],
#     [-1.46862],
#     [-1.99882],
#     [-2.13589]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[-1.52631808]
#  [-1.37764411]
#  [ 2.19354739]]
# eta_end:  [[0.73349256]]
# xi_end:  [[-0.42070341]
#  [-0.31056674]
#  [-0.43421838]]
# alpha_end, beta_end, gamma_end:  -0.6541810610820763 -0.9630746974245818 -0.7180711236699078
# alpha_end, beta_end, gamma_end:  -37.481813837392885 -55.180115518267314 -41.1424447765023
# final base state:
# eta_b:  [[0.99904835]]
# xi_b:  [[-0.00353983]
#  [-0.03584399]
#  [-0.02459817]]
# alpha_base, beta_base, gamma_base:  -0.0053232957043439005 -0.07185572704594077 -0.04904191897573519
# alpha_base, beta_base, gamma_base:  -0.3050023769590264 -4.117029893576449 -2.8098949765321715
# manipulability:  1.307320696210838
# T_f:  [120.19501718]
# ===================================================================================================================================================
# woa_tlbo_fitness:  0.995754
# -5.41005  0.369534  -3.36115  -3.11444  4.028  -1.93586  -1.97808
# P_i3 = np.array([
#     [-5.41005],
#     [0.369534],
#     [-3.36115],
#     [-3.11444],
#     [4.028],
#     [-1.93586],
#     [-1.97808]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.49743327]
#  [-1.40743319]
#  [ 2.20255945]]
# eta_end:  [[-0.85239692]]
# xi_end:  [[ 0.05320251]
#  [ 0.46300929]
#  [-0.23708939]]
# alpha_end, beta_end, gamma_end:  -0.5017258910044079 -0.8696572612099177 0.7795151613578938
# alpha_end, beta_end, gamma_end:  -28.746776026993327 -49.82769069023449 44.66292881226667
# final base state:
# eta_b:  [[0.99940468]]
# xi_b:  [[-0.00545456]
#  [-0.0035274 ]
#  [ 0.0338836 ]]
# alpha_base, beta_base, gamma_base:  -0.0111421459776814 -0.006681013580910931 0.06781881630339791
# alpha_base, beta_base, gamma_base:  -0.6383979392398106 -0.38279388105578127 3.885731945757719
# manipulability:  0.1173764302330992
# T_f:  [116.19523196]
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# woa_tlbo_fitness:  0.974588
# -5.55094  0.294247  -3.75749  -3.46536  -4.96809  1.86399  -5.29003
# P_i3 = np.array([
#     [-5.55094],
#     [0.294247],
#     [-3.75749],
#     [-3.46536],
#     [-4.96809],
#     [1.86399],
#     [-5.29003]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.49781833]
#  [-1.40468111]
#  [ 2.20401641]]
# eta_end:  [[-0.85246562]]
# xi_end:  [[ 0.0537661 ]
#  [ 0.46455046]
#  [-0.23367593]]
# alpha_end, beta_end, gamma_end:  -0.5019472128494321 -0.8739949867628397 0.7734748093144657
# alpha_end, beta_end, gamma_end:  -28.759456834627265 -50.07622405710297 44.31684213340502
# final base state:
# eta_b:  [[0.99894165]]
# xi_b:  [[-0.00754496]
#  [ 0.02828044]
#  [ 0.03548066]]
# alpha_base, beta_base, gamma_base:  -0.01308880816467859 0.057067393107041946 0.07063306852171736
# alpha_base, beta_base, gamma_base:  -0.7499334666924563 3.2697207728474695 4.046976720352753
# manipulability:  1.3315052960696885
# T_f:  [119.22121993]
# =========================================================================================================================================================================
# woa_tlbo_fitness:  1.02601
# -5.44003  0.269695  -3.29864  -3.3228  -2.32085  -1.87287  -2.03534
# P_i3 = np.array([
#     [-5.44003],
#     [0.269695],
#     [-3.29864],
#     [-3.3228],
#     [-2.32085],
#     [-1.87287],
#     [-2.03534]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.49692899]
#  [-1.40573607]
#  [ 2.20377018]]
# eta_end:  [[0.85248578]]
# xi_end:  [[-0.05463432]
#  [-0.46257241]
#  [ 0.23729697]]
# alpha_end, beta_end, gamma_end:  -0.5046560420909323 -0.867545149158813 0.7806914816730406
# alpha_end, beta_end, gamma_end:  -28.914661317586848 -49.70667558384746 44.73032700168008
# final base state:
# eta_b:  [[0.99938127]]
# xi_b:  [[-0.00524125]
#  [ 0.00462546]
#  [ 0.03447049]]
# alpha_base, beta_base, gamma_base:  -0.010157769517915024 0.009606688844134707 0.06890752916721882
# alpha_base, beta_base, gamma_base:  -0.5819973226431677 0.5504227258643298 3.948110597956259
# manipulability:  0.7551367581844198
# T_f:  [116.8391323]
# ============================================================================================================================================================================
# woa_tlbo_fitness:  27.9461
# 0.932552  0.429013  3.88437  -2.94344  3.19938  -2.09439  4.35319
# P_i3 = np.array([
#     [0.932552],
#     [0.429013],
#     [3.88437],
#     [-2.94344],
#     [3.19938],
#     [-2.09439],
#     [4.35319]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.52329736]
#  [-1.36343513]
#  [ 2.22598236]]
# eta_end:  [[0.83039099]]
# xi_end:  [[-0.04231394]
#  [-0.49930019]
#  [ 0.24363837]]
# alpha_end, beta_end, gamma_end:  -0.5621097418836212 -0.9417859812754433 0.8626409600661124
# alpha_end, beta_end, gamma_end:  -32.206515833119575 -53.96036193166968 49.42568624690162
# final base state:
# eta_b:  [[0.99982312]]
# xi_b:  [[-0.00011426]
#  [ 0.01179678]
#  [-0.01464789]]
# alpha_base, beta_base, gamma_base:  -0.0005742267044079772 0.023588217489585374 -0.02930563524357228
# alpha_base, beta_base, gamma_base:  -0.03290076664628336 1.3515053083899158 -1.679089215406532
# manipulability:  0.8027557304417907
# T_f:  [93.4963488]
# ==============================================================================================================================================================================
# woa_tlbo_fitness:  18.9271
# 0.874224  0.337685  2.61438  2.92758  -1.90856  -1.91144  4.211
# P_i3 = np.array([
#     [0.932552],
#     [0.429013],
#     [3.88437],
#     [-2.94344],
#     [3.19938],
#     [-2.09439],
#     [4.35319]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.52329736]
#  [-1.36343513]
#  [ 2.22598236]]
# eta_end:  [[0.83039099]]
# xi_end:  [[-0.04231394]
#  [-0.49930019]
#  [ 0.24363837]]
# alpha_end, beta_end, gamma_end:  -0.5621097418836212 -0.9417859812754433 0.8626409600661124
# alpha_end, beta_end, gamma_end:  -32.206515833119575 -53.96036193166968 49.42568624690162
# final base state:
# eta_b:  [[0.99982312]]
# xi_b:  [[-0.00011426]
#  [ 0.01179678]
#  [-0.01464789]]
# alpha_base, beta_base, gamma_base:  -0.0005742267044079772 0.023588217489585374 -0.02930563524357228
# alpha_base, beta_base, gamma_base:  -0.03290076664628336 1.3515053083899158 -1.679089215406532
# manipulability:  0.8027557304417907
# T_f:  [93.4963488]
# =========================================================================================================================================================
# woa_tlbo_fitness:  3.07665
# 1.01095  0.330951  3.42279  -3.15999  0.389075  1.98681  1.2056
# P_i3 = np.array([
#     [1.01095],
#     [0.330951],
#     [3.42279],
#     [-3.15999],
#     [0.389075],
#     [1.98681],
#     [1.2056]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.5409543 ]
#  [-1.35223801]
#  [ 2.20832824]]
# eta_end:  [[-0.8402563]]
# xi_end:  [[ 0.07214411]
#  [ 0.47545419]
#  [-0.25041543]]
# alpha_end, beta_end, gamma_end:  -0.5893450613881083 -0.8677478648023698 0.85869343822437
# alpha_end, beta_end, gamma_end:  -33.76698469441702 -49.718290334664545 49.199509905834084
# final base state:
# eta_b:  [[0.99986828]]
# xi_b:  [[-0.00112752]
#  [ 0.0002781 ]
#  [-0.01618897]]
# alpha_base, beta_base, gamma_base:  -0.0022637460192351053 0.0005196224381168625 -0.03237995669695859
# alpha_base, beta_base, gamma_base:  -0.1297030927917124 0.02977217264439402 -1.8552348595520929
# manipulability:  0.030574144917286095
# T_f:  [73.51353093]
# =====================================================================================================================================================================
# woa_tlbo_fitness:  19.7226
# 0.896287  0.135961  5.97695  -2.50733  1.01694  -1.83679  -2.30565
# P_i3 = np.array([
#     [0.896287],
#     [0.135961],
#     [5.97695],
#     [-2.50733],
#     [1.01694],
#     [-1.83679],
#     [-2.30565]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.51222907]
#  [-1.44985769]
#  [ 2.19384092]]
# eta_end:  [[-0.84730386]]
# xi_end:  [[ 0.02640225]
#  [ 0.47486875]
#  [-0.23638687]]
# alpha_end, beta_end, gamma_end:  -0.45697011448802577 -0.9144612832146176 0.7719749376843047
# alpha_end, beta_end, gamma_end:  -26.18245892377391 -52.39477205631506 44.23090581918539
# final base state:
# eta_b:  [[0.99711344]]
# xi_b:  [[-0.00287545]
#  [ 0.07577982]
#  [-0.0037324 ]]
# alpha_base, beta_base, gamma_base:  -0.006373197526426657 0.15168164513921897 -0.007970646873133156
# alpha_base, beta_base, gamma_base:  -0.3651573202674634 8.690718096078285 -0.45668442581967633
# manipulability:  2.083313874715818
# T_f:  [128.37091924]
# =================================================================================================================================================================
# woa_tlbo_fitness:  22.0787
# 3.95734  2.84134  -0.363671  3.09562  -1.96729  -1.79345  -1.91268
# P_i3 = np.array([
#     [3.95734],
#     [2.84134],
#     [-0.363671],
#     [3.0956],
#     [-1.96729],
#     [-1.79345],
#     [-1.91268]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.49208227]
#  [-1.3701327 ]
#  [ 2.20820928]]
# eta_end:  [[-0.83720068]]
# xi_end:  [[ 0.017821  ]
#  [ 0.49391457]
#  [-0.23414915]]
# alpha_end, beta_end, gamma_end:  -0.47207076314703855 -0.9590836698563715 0.7942866573343182
# alpha_end, beta_end, gamma_end:  -27.04766235984523 -54.9514464826885 45.509273188810276
# final base state:
# eta_b:  [[0.99932685]]
# xi_b:  [[-0.0068691 ]
#  [-0.03542262]
#  [-0.00662534]]
# alpha_base, beta_base, gamma_base:  -0.013293420792709452 -0.07094808043977477 -0.012787635909082024
# alpha_base, beta_base, gamma_base:  -0.7616569067137048 -4.065025573753764 -0.7326775675403376
# manipulability:  0.018719427557886505
# T_f:  [84.99441581]
# ********************************************************************************************************************************************************************

# woa_tlbo_fitness:  25.1768
# 3.95513  2.86343  -0.807711  3.03751  1.57053  1.79824  1.16942
# P_i3 = np.array([
#     [3.95513],
#     [2.86343],
#     [-0.807711],
#     [3.03751],
#     [1.57053],
#     [1.79824],
#     [1.16942]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.48357391]
#  [-1.37387806]
#  [ 2.1767063 ]]
# eta_end:  [[0.84162766]]
# xi_end:  [[-0.01621159]
#  [-0.48601186]
#  [ 0.23493091]]
# alpha_end, beta_end, gamma_end:  -0.4516109320283759 -0.9449452189136632 0.7781637641503807
# alpha_end, beta_end, gamma_end:  -25.875400387195434 -54.14137291481856 44.5854994558304
# final base state:
# eta_b:  [[0.99878963]]
# xi_b:  [[-0.00388898]
#  [-0.04867819]
#  [-0.00588092]]
# alpha_base, beta_base, gamma_base:  -0.007230354491362348 -0.09743840010528809 -0.01142342521596985
# alpha_base, beta_base, gamma_base:  -0.41426879673852157 -5.582809088540084 -0.6545140524583933
# manipulability:  0.08572364696060933
# T_f:  [84.94695017]
# **********************************************************************************************************************************************************

# woa_tlbo_fitness:  13.6571
# 1.21615  0.785506  2.4279  3.83609  1.40104  1.96354  1.4364
# P_i3 = np.array([
#     [1.21615],
#     [0.785506],
#     [2.4279],
#     [3.83609],
#     [1.40104],
#     [1.96354],
#     [1.4364]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.46071376]
#  [-1.3704115 ]
#  [ 2.23017145]]
# eta_end:  [[0.84180868]]
# xi_end:  [[-0.04113897]
#  [-0.48684763]
#  [ 0.22944526]]
# alpha_end, beta_end, gamma_end:  -0.5105329423549476 -0.9286077491592019 0.7921113582448338
# alpha_end, beta_end, gamma_end:  -29.251382899334246 -53.20530484996529 45.384637731804155
# final base state:
# eta_b:  [[0.99971777]]
# xi_b:  [[ 0.00175277]
#  [ 0.02361042]
#  [-0.00196464]]
# alpha_base, beta_base, gamma_base:  0.003415601085851737 0.0472319622060186 -0.0038497049220981004
# alpha_base, beta_base, gamma_base:  0.1956995267196057 2.706192092526279 -0.2205718444069605
# manipulability:  1.3249262453100241
# T_f:  [82.39024914]
# **********************************************************************************************************************************************************
# woa_tlbo_fitness:  15.2906
# -5.25667  0.581229  -4.12533  -2.76302  -1.54005  -1.98492  -1.82491
# P_i3 = np.array([
#     [-5.25667],
#     [0.581229],
#     [-4.12533],
#     [-2.76302],
#     [-1.54005],
#     [-1.98492],
#     [-1.82491]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.45059105]
#  [-1.43103292]
#  [ 2.23832081]]
# eta_end:  [[0.84642971]]
# xi_end:  [[-0.11664469]
#  [-0.47505574]
#  [ 0.21041102]]
# alpha_end, beta_end, gamma_end:  -0.6511924555989225 -0.855830938173361 0.7928655133645065
# alpha_end, beta_end, gamma_end:  -37.310579356578515 -49.035500734055276 45.427847637259596
# final base state:
# eta_b:  [[0.9992879]]
# xi_b:  [[-0.00760099]
#  [ 0.02074174]
#  [ 0.03058904]]
# alpha_base, beta_base, gamma_base:  -0.013934919933895366 0.04193124526559063 0.060910356231908255
# alpha_base, beta_base, gamma_base:  -0.7984121000649246 2.402483383446258 3.4899063407267152
# manipulability:  0.6210808867304375
# T_f:  [112.90098797]
# **********************************************************************************************************************************************************
# woa_tlbo_fitness:  15.9846
# 1.02729  0.189009  3.71057  2.90489  0.11557  1.84516  1.20329
# P_i3 = np.array([
#     [1.02729],
#     [0.189009],
#     [3.71057],
#     [2.90489],
#     [0.11557],
#     [1.84516],
#     [1.20329]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.46664151]
#  [-1.42608841]
#  [ 2.2088721 ]]
# eta_end:  [[0.84347077]]
# xi_end:  [[-0.04506808]
#  [-0.47462023]
#  [ 0.24751075]]
# alpha_end, beta_end, gamma_end:  -0.5181948724518721 -0.8920285011027699 0.8229886994013037
# alpha_end, beta_end, gamma_end:  -29.690379156812284 -51.10946831856961 47.15377906265548
# final base state:
# eta_b:  [[0.99989415]]
# xi_b:  [[-0.00322955]
#  [-0.01418194]
#  [ 0.00036969]]
# alpha_base, beta_base, gamma_base:  -0.00647155478339282 -0.028362292781903085 0.0008312449364874553
# alpha_base, beta_base, gamma_base:  -0.37079277597610827 -1.6250396737174055 0.04762682660235136
# manipulability:  0.5753544860073895
# T_f:  [79.69437285]
# **********************************************************************************************************************************************************
# woa_tlbo_fitness:  22.6779
# 1.05018  0.615851  2.53615  3.49146  1.33576  1.9346  1.28818
# P_i3 = np.array([
#     [1.05018],
#     [0.615851],
#     [2.53615],
#     [3.49146],
#     [1.33576],
#     [1.9346],
#     [1.28818]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.48944686]
#  [-1.43589862]
#  [ 2.25383902]]
# eta_end:  [[0.84239304]]
# xi_end:  [[-0.04279612]
#  [-0.48550384]
#  [ 0.22984449]]
# alpha_end, beta_end, gamma_end:  -0.5124209301826392 -0.9244625519760066 0.7923007598852424
# alpha_end, beta_end, gamma_end:  -29.359556633633048 -52.967802546118676 45.395489646432424
# final base state:
# eta_b:  [[0.99983958]]
# xi_b:  [[ 0.00080402]
#  [ 0.01785529]
#  [-0.00116849]]
# alpha_base, beta_base, gamma_base:  0.0015670614782294036 0.03571433103620545 -0.0023093632293698556
# alpha_base, beta_base, gamma_base:  0.08978600894007675 2.04628043650766 -0.132316766405595
# manipulability:  0.6411630109465417
# T_f:  [74.98840206]
# ***********************************************************************************************************************************************************************
# woa_tlbo_fitness:  5.6337
# 1.50994  0.553687  5.11042  -3.9303  4.99181  1.91847  1.42916
# P_i3 = np.array([
#     [1.50994],
#     [0.553687],
#     [5.11042],
#     [-3.9303],
#     [4.99181],
#     [1.91847],
#     [1.42916]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.5107663 ]
#  [-1.37722064]
#  [ 2.1787285 ]]
# eta_end:  [[0.85095878]]
# xi_end:  [[ 4.40693077e-04]
#  [-4.77481405e-01]
#  [ 2.18816045e-01]]
# alpha_end, beta_end, gamma_end:  -0.365526175831588 -0.9489887338504591 0.6926733693479097
# alpha_end, beta_end, gamma_end:  -20.943107176706825 -54.37304925509507 39.68726064474167
# final base state:
# eta_b:  [[0.99965588]]
# xi_b:  [[-0.00138674]
#  [ 0.02136624]
#  [-0.01515556]]
# alpha_base, beta_base, gamma_base:  -0.0034232794358106866 0.04268871384775269 -0.03039230643590848
# alpha_base, beta_base, gamma_base:  -0.19613946376587793 2.4458831363179026 -1.741350888445845
# manipulability:  1.5075846567882607
# T_f:  [109.75987973]
# ****************************************************************************************************************************************************************
# best fitness found is:   38.837
# 0.845941  0.418338  2.04845  2.9113  4.98917  -1.8996  4.11499
# P_i3 = np.array([
#     [0.845941],
#     [0.418338],
#     [2.04845],
#     [2.9113],
#     [4.98917],
#     [-1.8996],
#     [4.11499]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.47652203]
#  [-1.42461658]
#  [ 2.25606213]]
# eta_end:  [[-0.84104911]]
# xi_end:  [[ 0.02333845]
#  [ 0.48581903]
#  [-0.23679438]]
# alpha_end, beta_end, gamma_end:  -0.4725671859440541 -0.9376037448967885 0.7915779424466456
# alpha_end, beta_end, gamma_end:  -27.0761052909683 -53.72073743824669 45.354075257842375
# final base state:
# eta_b:  [[0.99989548]]
# xi_b:  [[ 0.00032664]
#  [ 0.01444742]
#  [-0.00044913]]
# alpha_base, beta_base, gamma_base:  0.0006405027870023639 0.028896129124028096 -0.000889107205197867
# alpha_base, beta_base, gamma_base:  0.036698106461602174 1.6556262430718705 -0.050942090392509826
# manipulability:  1.156860254768346
# T_f:  [107.15571306]
# *****************************************************************************************************************************************************************

# best fitness found is:   44.4788
# 0.877531  0.260779  2.74066  2.82969  -5.2371  1.8707  1.04462
# P_i3 = np.array([
#     [0.877531],
#     [0.260779],
#     [2.74066],
#     [2.82969],
#     [-5.2371],
#     [1.8707],
#     [1.04462]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.47364144]
#  [-1.36561877]
#  [ 2.23333494]]
# eta_end:  [[-0.84160598]]
# xi_end:  [[ 0.07728369]
#  [ 0.47443089]
#  [-0.24625586]]
# alpha_end, beta_end, gamma_end:  -0.5946114456833343 -0.8640898987959713 0.8500035846170781
# alpha_end, beta_end, gamma_end:  -34.06872628782745 -49.50870432089559 48.70161796954972
# final base state:
# eta_b:  [[0.99997753]]
# xi_b:  [[-0.00069995]
#  [ 0.00666619]
#  [-0.00013985]]
# alpha_base, beta_base, gamma_base:  -0.0014018604894615893 0.013332272864508532 -0.0002890433880603004
# alpha_base, beta_base, gamma_base:  -0.08032068951229289 0.7638829664531314 -0.016560966232017266
# manipulability:  1.2180812219339885
# T_f:  [112.4806701]
# ***********************************************************************************************************************************************************
# best fitness found is:   49.9638
# 1.04657  0.190151  -0.338793  3.60032  -5.42917  -1.88057  -2.20996
# P_i3 = np.array([
#     [1.04657],
#     [0.190151],
#     [-0.338793],
#     [3.60032],
#     [-5.42917],
#     [-1.88057],
#     [-2.20996]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.51240483]
#  [-1.3362238 ]
#  [ 2.29596674]]
# eta_end:  [[0.8392998]]
# xi_end:  [[-0.07525308]
#  [-0.46477011]
#  [ 0.27184843]]
# alpha_end, beta_end, gamma_end:  -0.5977794072812923 -0.8319530813756294 0.8970363416931713
# alpha_end, beta_end, gamma_end:  -34.25023711704996 -47.6674003157275 51.396396448873915
# final base state:
# eta_b:  [[0.99971361]]
# xi_b:  [[ 0.00814715]
#  [ 0.02033346]
#  [-0.00963665]]
# alpha_base, beta_base, gamma_base:  0.015911674779303275 0.04082362649381914 -0.018953394209085588
# alpha_base, beta_base, gamma_base:  0.9116718098388333 2.3390215025142873 -1.0859494956282991
# manipulability:  1.6179381103735289
# T_f:  [116.60588488]
# *******************************************************************************************************************************************************************
# woa_tlbo_fitness:  11.873
# -5.59249  0.528139  -4.98639  -3.44058  -0.637893  -2.09406  -2.18027
# P_i3 = np.array([
#     [-5.59249],
#     [0.528139],
#     [-4.98639],
#     [-3.44058],
#     [-0.637893],
#     [-2.09406],
#     [-2.18027]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.44386879]
#  [-1.43413344]
#  [ 2.22678402]]
# eta_end:  [[0.85706959]]
# xi_end:  [[-0.10360437]
#  [-0.46215679]
#  [ 0.20275344]]
# alpha_end, beta_end, gamma_end:  -0.5847691671593537 -0.8483475230427836 0.7348010566859519
# alpha_end, beta_end, gamma_end:  -33.50480526761111 -48.60673263072886 42.100999329858205
# final base state:
# eta_b:  [[0.99843772]]
# xi_b:  [[-0.01290629]
#  [ 0.04093464]
#  [ 0.03577571]]
# alpha_base, beta_base, gamma_base:  -0.022923780285319124 0.08275928030190705 0.07068357248963227
# alpha_base, beta_base, gamma_base:  -1.313435860833988 4.741757476839443 4.049870384562942
# manipulability:  1.24747622125036
# T_f:  [120.11361684]
# ********************************************************************************************************************************************************************
# woa_tlbo_fitness:  15.1031
# 0.934828  0.402759  2.85515  3.1233  1.0076  1.9028  1.13758
# P_i3 = np.array([
#     [0.934828],
#     [0.402759],
#     [2.85515],
#     [3.1233],
#     [1.0076],
#     [1.9028],
#     [1.13758]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.49704754]
#  [-1.42027245]
#  [ 2.25036444]]
# eta_end:  [[0.84352432]]
# xi_end:  [[-0.04368138]
#  [-0.48152546]
#  [ 0.23386296]]
# alpha_end, beta_end, gamma_end:  -0.5115490837656106 -0.9139567021541148 0.7966576970812564
# alpha_end, beta_end, gamma_end:  -29.309603513553707 -52.365861691126014 45.6451237593676
# final base state:
# eta_b:  [[0.99996971]]
# xi_b:  [[-0.00065984]
#  [ 0.00775071]
#  [-0.00025233]]
# alpha_base, beta_base, gamma_base:  -0.0013237095264242162 0.015501233231716588 -0.0005149295183688935
# alpha_base, beta_base, gamma_base:  -0.0758429691653685 0.8881552414252982 -0.029503288149241795
# manipulability:  0.2757771092447774
# T_f:  [67.08118557]
# *******************************************************************************************************************************************************************
# best fitness found is:   181.479
# -4.99476  0.666478  -4.40716  -2.39198  -1.3627  -1.90239  -1.68778
# P_i3 = np.array([
#     [-4.99476],
#     [0.666478],
#     [-4.40716],
#     [-2.39198],
#     [-1.3627],
#     [-1.90239],
#     [-1.68778]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.38168527]
#  [-1.3818712 ]
#  [ 2.24643987]]
# eta_end:  [[0.8472732]]
# xi_end:  [[-0.11076418]
#  [-0.47694056]
#  [ 0.20588132]]
# alpha_end, beta_end, gamma_end:  -0.6357009780367142 -0.8673065611758531 0.7791129625563264
# alpha_end, beta_end, gamma_end:  -36.42298307384237 -49.69300549938133 44.63988451841164
# final base state:
# eta_b:  [[0.99941863]]
# xi_b:  [[-0.00736416]
#  [ 0.02016224]
#  [ 0.02648871]]
# alpha_base, beta_base, gamma_base:  -0.013663360823533794 0.04070241154004871 0.05271773115929363
# alpha_base, beta_base, gamma_base:  -0.7828529091528792 2.3320763972493683 3.020503500932838
# manipulability:  1.4141193900013265
# T_f:  [107.2757732]
# *********************************************************************************************************************************************************
# best fitness found is:   84.4425
# 0.990782  0.530642  2.35536  3.2739  1.5087  1.89111  1.16626
# P_i3 = np.array([
#     [0.990782],
#     [0.530642],
#     [2.35536],
#     [3.2739],
#     [1.5087],
#     [1.89111],
#     [1.16626]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.4937188 ]
#  [-1.44998153]
#  [ 2.28418288]]
# eta_end:  [[0.84237576]]
# xi_end:  [[-0.04400193]
#  [-0.48661108]
#  [ 0.2273248 ]]
# alpha_end, beta_end, gamma_end:  -0.5144763037913823 -0.9269841147796272 0.7886298304131083
# alpha_end, beta_end, gamma_end:  -29.477320866736598 -53.11227745254332 45.18516088078896
# final base state:
# eta_b:  [[0.99980225]]
# xi_b:  [[ 0.00072464]
#  [ 0.01984879]
#  [-0.00097538]]
# alpha_base, beta_base, gamma_base:  0.00141137818583305 0.03970157810208286 -0.0019231289267351538
# alpha_base, beta_base, gamma_base:  0.08086601334506456 2.2747328652583567 -0.110187170961448
# manipulability:  0.08058030005524121
# T_f:  [70.31572165]
# ********************************************************************************************************************************************************************
# best fitness found is:   67.4365
# 1.07841  0.66458  2.61864  3.60412  1.25891  1.97739  1.3413
# P_i3 = np.array([
#     [1.07841],
#     [0.66458],
#     [2.61864],
#     [3.60412],
#     [1.25891],
#     [1.97739],
#     [1.3413]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.4908377 ]
#  [-1.40457995]
#  [ 2.2296051 ]]
# eta_end:  [[0.85090155]]
# xi_end:  [[-0.05955532]
#  [-0.46709002]
#  [ 0.23290909]]
# alpha_end, beta_end, gamma_end:  -0.5203589771142468 -0.8743914578052258 0.7819150729329205
# alpha_end, beta_end, gamma_end:  -29.814373220390937 -50.098940174530846 44.80043361672029
# final base state:
# eta_b:  [[0.99985964]]
# xi_b:  [[ 0.00095675]
#  [ 0.01666972]
#  [-0.0013835 ]]
# alpha_base, beta_base, gamma_base:  0.0018681484254023783 0.033343588448472135 -0.0027362472259495098
# alpha_base, beta_base, gamma_base:  0.10703702027956657 1.9104468919186182 -0.15677541775128626
# manipulability:  0.9384502618433851
# T_f:  [77.4080756]
# ==============================================================================================================================================================
# best fitness found is:   58.0853
# 0.907724  0.408915  2.33924  3.01508  1.51052  1.91199  1.03117
# P_i3 = np.array([
#     [0.907724],
#     [0.408915],
#     [2.33924],
#     [3.01508],
#     [1.51052],
#     [1.91199],
#     [1.03117]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.51059556]
#  [-1.40414682]
#  [ 2.24455647]]
# eta_end:  [[0.85086341]]
# xi_end:  [[-0.05978757]
#  [-0.46697455]
#  [ 0.23322025]]
# alpha_end, beta_end, gamma_end:  -0.5210830031342849 -0.8738031346421608 0.7827869542825946
# alpha_end, beta_end, gamma_end:  -29.855856855596773 -50.06523174029743 44.85038873829279
# final base state:
# eta_b:  [[0.99988253]]
# xi_b:  [[ 0.00028285]
#  [ 0.01530829]
#  [-0.00070511]]
# alpha_base, beta_base, gamma_base:  0.000544293736396157 0.03061816624873133 -0.0014020490317315033
# alpha_base, beta_base, gamma_base:  0.031185733910905965 1.7542917024822091 -0.08033149218861876
# manipulability:  0.775633417576644
# T_f:  [64.75687285]
# ****************************************************************************************************************************************************************
# best fitness found is:   64.3594
# 1.10812  0.708544  2.5962  3.6871  1.27874  1.98507  1.37941
# P_i3 = np.array([
#     [1.10812],
#     [0.708544],
#     [2.5962],
#     [3.6871],
#     [1.27874],
#     [1.98507],
#     [1.37941]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.47806924]
#  [-1.39548618]
#  [ 2.22475177]]
# eta_end:  [[0.85090477]]
# xi_end:  [[-0.05949837]
#  [-0.46711202]
#  [ 0.23286772]]
# alpha_end, beta_end, gamma_end:  -0.5202113313691689 -0.8745035662827777 0.781785710778012
# alpha_end, beta_end, gamma_end:  -29.805913742334905 -50.10536351714221 44.793021711215324
# final base state:
# eta_b:  [[0.99983359]]
# xi_b:  [[ 0.00119062]
#  [ 0.01813742]
#  [-0.00155236]]
# alpha_base, beta_base, gamma_base:  0.0023260729684813296 0.036280465593207925 -0.0030630262017442905
# alpha_base, beta_base, gamma_base:  0.13327416393344715 2.078717557260411 -0.17549847389793488
# manipulability:  1.1091513209269592
# T_f:  [79.1902921]
# ****************************************************************************************************************************************************************
# best fitness found is:   49.8358
# 0.852354  0.433124  2.03323  2.9251  1.82466  1.94137  0.966595
# P_i3 = np.array([
#     [0.852354],
#     [0.433124],
#     [2.03323],
#     [2.9251],
#     [1.82466],
#     [1.94137],
#     [0.966595]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.48287401]
#  [-1.41160482]
#  [ 2.25471803]]
# eta_end:  [[0.85086614]]
# xi_end:  [[-0.05964069]
#  [-0.46696158]
#  [ 0.23327387]]
# alpha_end, beta_end, gamma_end:  -0.5207592091106945 -0.8738694960530611 0.7827642620707721
# alpha_end, beta_end, gamma_end:  -29.837304824613483 -50.06903396906455 44.849088570327545
# final base state:
# eta_b:  [[0.99981065]]
# xi_b:  [[ 0.00095795]
#  [ 0.0194068 ]
#  [-0.00106279]]
# alpha_base, beta_base, gamma_base:  0.0018757061913708406 0.038818034047302795 -0.002089578329576507
# alpha_base, beta_base, gamma_base:  0.10747004837210708 2.2241095199055834 -0.11972401924673041
# manipulability:  1.0699635902332962
# T_f:  [62.82431271]
# ****************************************************************************************************************************************************************
# best fitness found is:   43.8708
# 0.837998  0.417588  2.07518  2.89874  1.78321  1.93972  0.958


# *******************************************************************************************************************************************************************************
# best fitness found is:   60.3538
# 1.11508  0.304819  -0.678856  3.23913  1.23781  -2.07818  -2.15025
# P_i3 = np.array([
#     [1.11508],
#     [0.304819],
#     [-0.678856],
#     [3.23913],
#     [1.23781],
#     [-2.07818],
#     [-2.15025]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.52579805]
#  [-1.34003091]
#  [ 2.27464222]]
# eta_end:  [[-0.85449246]]
# xi_end:  [[ 0.05694052]
#  [ 0.46415721]
#  [-0.22618244]]
# alpha_end, beta_end, gamma_end:  -0.49987925998839017 -0.8749005989302338 0.7551733428202146
# alpha_end, beta_end, gamma_end:  -28.64097186345756 -50.12811181217034 43.268245344384354
# final base state:
# eta_b:  [[0.9998881]]
# xi_b:  [[ 0.00742527]
#  [-0.0064181 ]
#  [-0.01129016]]
# alpha_base, beta_base, gamma_base:  0.014995566327669392 -0.01266743219641877 -0.022676862616421403
# alpha_base, beta_base, gamma_base:  0.8591826619839471 -0.7257904021229299 -1.2992885205189397
# manipulability:  0.673911026582221
# T_f:  [69.5689433]
# ***********************************************************************************************************************************************************************
# best fitness found is:   49.144
# 0.849092  0.430129  2.04629  2.91941  1.81173  1.94013  0.964342
# P_i3 = np.array([
#     [0.849092],
#     [0.430129],
#     [2.04629],
#     [2.91941],
#     [1.81173],
#     [1.94013],
#     [0.964342]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.4809459 ]
#  [-1.41063419]
#  [ 2.255378  ]]
# eta_end:  [[0.85085984]]
# xi_end:  [[-0.05975927]
#  [-0.46700571]
#  [ 0.23317811]]
# alpha_end, beta_end, gamma_end:  -0.5210237143893351 -0.8739089849477487 0.7827015859802872
# alpha_end, beta_end, gamma_end:  -29.852459860738527 -50.07129651606778 44.84549749486638
# final base state:
# eta_b:  [[0.9998146]]
# xi_b:  [[ 0.00091938]
#  [ 0.01920586]
#  [-0.00103159]]
# alpha_base, beta_base, gamma_base:  0.0018001153778935124 0.03841593358168777 -0.002028972098751729
# alpha_base, beta_base, gamma_base:  0.10313901378989555 2.201070860285597 -0.11625153800827495
# manipulability:  1.0843668031135365
# T_f:  [62.70210481]
# *************************************************************************************************************************************************************************
# best fitness found is:   42.8634
# 0.833792  0.417887  2.06433  2.89123  1.79434  1.94204  0.953707
# P_i3 = np.array([
#     [0.833792],
#     [0.417887],
#     [2.06433],
#     [2.89123],
#     [1.79434],
#     [1.94204],
#     [0.953707]
# ])
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.47481446]
#  [-1.40878734]
#  [ 2.24928554]]
# eta_end:  [[0.85087073]]
# xi_end:  [[-0.05973611]
#  [-0.46693505]
#  [ 0.23328578]]
# alpha_end, beta_end, gamma_end:  -0.5209569111089924 -0.8737342974282758 0.7828417148317847
# alpha_end, beta_end, gamma_end:  -29.848632314717257 -50.06128765846839 44.8535262866452
# final base state:
# eta_b:  [[0.99982747]]
# xi_b:  [[ 0.00082917]
#  [ 0.01853174]
#  [-0.00095506]]
# alpha_base, beta_base, gamma_base:  0.0016237656363605395 0.037067160117005615 -0.0018803604698654785
# alpha_base, beta_base, gamma_base:  0.09303491788183328 2.1237918332400727 -0.10773671888652835
# manipulability:  1.1607730473604012
# T_f:  [62.09686426]
# *************************************************************************************************************************************************************************
# best fitness found is:   41.3772
# 0.890033  0.28735  2.78844  2.90451  1.05669  1.85941  1.0428
# P_i3 = np.array([
#     [0.890033],
#     [0.28735],
#     [2.78844],
#     [2.90451],
#     [1.05669],
#     [1.85941],
#     [1.0428]
# ])
# locus_e:  4.930306365799984
# Pe_straight_line_locus:  2.9160601575687006
# delta_locus_norm:  2.0142462082312833
# cost_func:  [45.88660036]
# locus_e:  4.930306365799984
# Pe_straight_line_locus:  2.9160601575687006
# delta_locus_norm:  2.0142462082312833
# initial end-effector position:  -0.381849443981743 0.568500546238447 1.157380648460746
# final end state:
# r_e:  [[ 1.47674108]
#  [-1.41005066]
#  [ 2.22881918]]
# eta_end:  [[0.85087101]]
# xi_end:  [[-0.05994984]
#  [-0.46694078]
#  [ 0.23321849]]
# alpha_end, beta_end, gamma_end:  -0.5214149578136107 -0.8736071077977215 0.7828793292991659
# alpha_end, beta_end, gamma_end:  -29.87487645771176 -50.054000229439794 44.85568143687478
# final base state:
# eta_b:  [[0.99997952]]
# xi_b:  [[-1.05075036e-03]
#  [ 6.31334314e-03]
#  [ 7.60428370e-05]]
# alpha_base, beta_base, gamma_base:  -0.002100666513125249 0.012626922966925403 0.0001388261310137047
# alpha_base, beta_base, gamma_base:  -0.12035932536653973 0.7234693942416331 0.007954151393215505
# manipulability:  0.98363559187838
# T_f:  [62.38208763]
#**************************************************************************************************************************************************************************

















def hua_qiu(x, y, z, r, dense):
    """
        圆心坐标 半径 稠密程度
    """
    t = np.linspace(0, np.pi * 2, dense)
    s = np.linspace(0, np.pi, dense)
    t, s = np.meshgrid(t, s)  # 生成稠密网格点
    x = x + r * np.sin(s) * np.cos(t)  # 球面坐标公式
    y = y + r * np.sin(s) * np.sin(t)
    z = z + r * np.cos(s)
    return x, y, z


time_buff, \
q_ddot_buff, q_dot_buff, q_buff, \
Pe_buff, r_e_buff, \
eta_end_buff, xi_end_buff, \
eta_base_buff, xi_base_buff, \
Pe_initial_buff, \
r_e, eta_end, xi_end, \
eta_b, xi_b, \
manipul, T_f, locus_e, Pe_straight_line_locus, delta_xi_end_norm, delta_Pe_end_norm, delta_xi_base_norm_max \
    = Bezier_calc_forward_kinematics(P_i3)

# text_save("data", eta_end_buff, xi_end_buff[0], xi_end_buff[1], xi_end_buff[2])
delta_locus_norm = linalg.norm(locus_e - Pe_straight_line_locus)

K_a = 1 / 0.0002  # 1 degree error tolerance
K_p = 1 / 0.002  # 0.002 meter error tolerance for end-effector
K_s = 1 / 0.1  # locus tolerance 0.1 meter.
K_b = 1 / 0.0008  # attitude error tolerance for base is 5 degree
K_M = 0
K_t = 0  # max allowed motion time is set to 100 seconds, tolerance is 10 seconds.

cost_func = K_a * delta_xi_end_norm + K_p * delta_Pe_end_norm + K_b * delta_xi_base_norm_max + K_s * delta_locus_norm + K_M * (1 / manipul) + K_t * T_f
print("cost_func: ", cost_func)
print("locus_e: ", locus_e)
print("Pe_straight_line_locus: ", Pe_straight_line_locus)
print("delta_locus_norm: ", delta_locus_norm)

print("initial end-effector position: ", Pe_initial_buff[0], Pe_initial_buff[1], Pe_initial_buff[2])
print("final end state: ")
print("r_e: ", r_e)
print("eta_end: ", eta_end)
print("xi_end: ", xi_end)
alpha_end, beta_end, gamma_end = calc_quaternion2euler(eta_end, xi_end[0], xi_end[1], xi_end[2])
print("alpha_end, beta_end, gamma_end: ", alpha_end, beta_end, gamma_end)
print("alpha_end, beta_end, gamma_end: ", alpha_end * 180 / math.pi, beta_end * 180 / math.pi, gamma_end * 180 / math.pi)

print("final base state: ")
print("eta_b: ", eta_b)
print("xi_b: ", xi_b)
alpha_base, beta_base, gamma_base = calc_quaternion2euler(eta_b, xi_b[0], xi_b[1], xi_b[2])
print("alpha_base, beta_base, gamma_base: ", alpha_base, beta_base, gamma_base)
print("alpha_base, beta_base, gamma_base: ", alpha_base * 180 / math.pi, beta_base * 180 / math.pi, gamma_base * 180 / math.pi)

print("manipulability: ", manipul)
print("T_f: ", T_f)

alpha_base_rad = []
beta_base_rad = []
gamma_base_rad = []
alpha_base_deg = []
beta_base_deg = []
gamma_base_deg = []
for i in range(len(time_buff)):
    alpha_temp, beta_temp, gamma_temp = calc_quaternion2euler(eta_base_buff[i], xi_base_buff[0][i], xi_base_buff[1][i], xi_base_buff[2][i])
    alpha_base_rad.append(alpha_temp)
    beta_base_rad.append(beta_temp)
    gamma_base_rad.append(gamma_temp)
    alpha_base_deg.append(alpha_temp * 180 / math.pi)
    beta_base_deg.append(beta_temp * 180 / math.pi)
    gamma_base_deg.append(gamma_temp * 180 / math.pi)

# alpha_end_rad = []
# beta_end_rad = []
# gamma_end_rad = []
# alpha_end_deg = []
# beta_end_deg = []
# gamma_end_deg = []
# for i in range(len(time_buff)):
#     # if eta_end_buff[i] < 0:
#     #     if xi_end_buff[0][i] > 0:
#     #         xi_end_buff[0][i] = -xi_end_buff[0][i]
#     #     if xi_end_buff[1][i] > 0:
#     #         xi_end_buff[1][i] = -xi_end_buff[1][i]
#     #     if xi_end_buff[2][i] > 0:
#     #         xi_end_buff[2][i] = -xi_end_buff[2][i]
#     alpha_temp, beta_temp, gamma_temp = calc_quaternion2euler(eta_end_buff[i], xi_end_buff[0][i], xi_end_buff[1][i], xi_end_buff[2][i])
#     alpha_end_rad.append(alpha_temp)
#     beta_end_rad.append(beta_temp)
#     gamma_end_rad.append(gamma_temp)
#     alpha_end_deg.append(alpha_temp * 180 / math.pi)
#     beta_end_deg.append(beta_temp * 180 / math.pi)
#     gamma_end_deg.append(gamma_temp * 180 / math.pi)


Q2C_az_1 = []
Q2C_az_2 = []
Q2C_az_3 = []
for i in range(len(time_buff)):
    Q2C = calc_quaternion2dc(eta_end_buff[i], xi_end_buff[0][i], xi_end_buff[1][i], xi_end_buff[2][i])
    Q2C_az = Q2C @ np.array([[0],
                             [0],
                             [1]])
    Q2C_az_norm = linalg.norm(Q2C_az)
    Q2C_az_1.append(Q2C_az[0, 0] / Q2C_az_norm)
    Q2C_az_2.append(Q2C_az[1, 0] / Q2C_az_norm)
    Q2C_az_3.append(Q2C_az[2, 0] / Q2C_az_norm)

Q2C_ax_1 = []
Q2C_ax_2 = []
Q2C_ax_3 = []
for i in range(len(time_buff)):
    Q2C = calc_quaternion2dc(eta_end_buff[i], xi_end_buff[0][i], xi_end_buff[1][i], xi_end_buff[2][i])
    Q2C_ax = Q2C @ np.array([[1],
                             [0],
                             [0]])
    Q2C_ax_norm = linalg.norm(Q2C_ax)
    Q2C_ax_1.append(Q2C_ax[0, 0] / Q2C_ax_norm)
    Q2C_ax_2.append(Q2C_ax[1, 0] / Q2C_ax_norm)
    Q2C_ax_3.append(Q2C_ax[2, 0] / Q2C_ax_norm)

Pe_x = []
Pe_y = []
Pe_z = []
for i in range(len(time_buff)):
    Pe_x.append(Pe_buff[0][i])
    Pe_y.append(Pe_buff[1][i])
    Pe_z.append(Pe_buff[2][i])

r_e_x = []
r_e_y = []
r_e_z = []
for i in range(len(time_buff)):
    r_e_x.append(r_e_buff[0][i])
    r_e_y.append(r_e_buff[1][i])
    r_e_z.append(r_e_buff[2][i])

real_time = []
for tau_time in time_buff:
    real_time.append(tau_time * T_f)

q_dot_in_time_domain = [[], [], [], [], [], [], []]
for i in range(len(q_dot_buff)):
    for q_dot_in_tau_domain in q_dot_buff[i]:
        q_dot_in_time_domain[i].append(q_dot_in_tau_domain / T_f)

plt.figure(figsize=(6, 6))
# ax1 = plt.gca()
l0, = plt.plot(real_time, q_dot_in_time_domain[0], color='r', linewidth=3.0, linestyle=(0, (1, 4)))
l1, = plt.plot(real_time, q_dot_in_time_domain[1], color='g', linewidth=3.0, linestyle=(0, (1, 1)))
l2, = plt.plot(real_time, q_dot_in_time_domain[2], color='b', linewidth=3.0, linestyle=(0, (1, 2)))
l3, = plt.plot(real_time, q_dot_in_time_domain[3], color='c', linewidth=3.0, linestyle=(0, (5, 10)))
l4, = plt.plot(real_time, q_dot_in_time_domain[4], color='m', linewidth=3.0, linestyle=(0, (5, 5)))
l5, = plt.plot(real_time, q_dot_in_time_domain[5], color='y', linewidth=3.0, linestyle=(0, (3, 5, 1, 5)))
l6, = plt.plot(real_time, q_dot_in_time_domain[6], color='k', linewidth=3.0, linestyle=(0, (3, 1, 1, 1, 1, 1)))
plt.grid(color='grey', linestyle='--', linewidth=0.5)
plt.xlabel('time')
plt.ylabel('joint velocity (rad/s)')
plt.legend(handles=[l0, l1, l2, l3, l4, l5, l6],
           labels=['joint 1', 'joint 2', 'joint 3', 'joint 4', 'joint 5', 'joint 6', 'joint 7'],
           loc='best')

plt.figure(figsize=(6, 6))
l0, = plt.plot(real_time, alpha_base_deg, color='r', linewidth=3.0, linestyle=(0, (1, 4)))
l1, = plt.plot(real_time, beta_base_deg, color='g', linewidth=3.0, linestyle=(0, (1, 1)))
l2, = plt.plot(real_time, gamma_base_deg, color='b', linewidth=3.0, linestyle=(0, (1, 2)))
plt.grid(color='grey', linestyle='--', linewidth=0.5)
plt.xlabel('time')
plt.ylabel('base attitude (deg)')
plt.legend(handles=[l0, l1, l2],
           labels=['Roll', 'Pitch', 'Yaw'],
           loc='best')

# plt.figure(figsize=(6, 6))
# l0, = plt.plot(real_time, alpha_end_deg, color='r', linewidth=3.0, linestyle=(0, (1, 4)))
# l1, = plt.plot(real_time, beta_end_deg, color='g', linewidth=3.0, linestyle=(0, (1, 1)))
# l2, = plt.plot(real_time, gamma_end_deg, color='b', linewidth=3.0, linestyle=(0, (1, 2)))
# plt.grid(color='grey', linestyle='--', linewidth=0.5)
# plt.xlabel('time')
# plt.ylabel('end-effector orientation')
# plt.legend(handles=[l0, l1, l2],
#            labels=['Roll', 'Pitch', 'Yaw'],
#            loc='best')

# eta_end_shape_changed = []
# for i in range(len(time_buff)):
#     eta_end_shape_changed.append(eta_end_buff[i])


# --------------------------------------  plot attitude of end-effector on a sphere------------------------------------------------------------------------------
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(111, projection='3d')
xx, yy, zz = hua_qiu(x=0, y=0, z=0, r=1, dense=100)
# ax.plot_surface(xx, yy, zz, rstride=1, cstride=1, cmap='gray', alpha=0.5)    # cmap='rainbow'
ax.plot_surface(xx, yy, zz, rstride=5, cstride=5, color='gray', alpha=0.5, edgecolors='gray', lw=0.5)
ax.scatter(Q2C_ax_1[0], Q2C_ax_2[0], Q2C_ax_3[0], s=40, c='g', alpha=1, label='starting point for x axis')
ax.scatter(Q2C_ax_1[-1], Q2C_ax_2[-1], Q2C_ax_3[-1], s=40, c='r', alpha=1, label='final point for x axis')
ax.plot3D(Q2C_ax_1, Q2C_ax_2, Q2C_ax_3, color='r', linewidth=2.0)  # 绘制 x-axis 空间曲线
ax.scatter(Q2C_az_1[0], Q2C_az_2[0], Q2C_az_3[0], s=40, c='b', alpha=1, label='starting point for z axis')
ax.scatter(Q2C_az_1[-1], Q2C_az_2[-1], Q2C_az_3[-1], s=40, c='y', alpha=1, label='final point for z axis')
ax.plot3D(Q2C_az_1, Q2C_az_2, Q2C_az_3, color='m', linewidth=2.0)  # 绘制 z-axis 空间曲线
ax.legend(loc='best')  # 绘制图例

plt.figure(figsize=(6, 6))
l0, = plt.plot(real_time, eta_end_buff, color='r', linewidth=3.0, linestyle=(0, (1, 4)))
l1, = plt.plot(real_time, xi_end_buff[0], color='g', linewidth=3.0, linestyle=(0, (1, 1)))
l2, = plt.plot(real_time, xi_end_buff[1], color='b', linewidth=3.0, linestyle=(0, (1, 2)))
l3, = plt.plot(real_time, xi_end_buff[2], color='b', linewidth=3.0, linestyle=(0, (5, 10)))
plt.grid(color='grey', linestyle='--', linewidth=0.5)
plt.xlabel('time')
plt.ylabel('end-effector orientation in quaternion')
plt.legend(handles=[l0, l1, l2, l3],
           labels=['eta_end', 'xi_end [0]', 'xi_end [1]', 'xi_end [2]'],
           loc='best')

plt.figure(figsize=(6, 6))
l0, = plt.plot(real_time, Pe_x, color='r', linewidth=3.0, linestyle=(0, (1, 4)))
l1, = plt.plot(real_time, Pe_y, color='g', linewidth=3.0, linestyle=(0, (1, 1)))
l2, = plt.plot(real_time, Pe_z, color='b', linewidth=3.0, linestyle=(0, (1, 2)))
plt.grid(color='grey', linestyle='--', linewidth=0.5)
plt.xlabel('time')
plt.ylabel('position of end-effector (m)')
plt.legend(handles=[l0, l1, l2],
           labels=['Pe_X', 'Pe_Y', 'Pe_Z'],
           loc='best')

# plt.figure()
# l0, = plt.plot(real_time, r_e_x, color='r', linewidth=3.0, linestyle=(0, (1, 10)))
# l1, = plt.plot(real_time, r_e_y, color='g', linewidth=3.0, linestyle=(0, (1, 1)))
# l2, = plt.plot(real_time, r_e_z, color='b', linewidth=3.0, linestyle=(0, (1, 2)))
# plt.grid(color='grey', linestyle='--', linewidth=0.5)
# plt.xlabel('time')
# plt.ylabel('position of end-effector')
# plt.legend(handles=[l0, l1, l2],
#            labels=['r_e_X', 'r_e_Y', 'r_e_Z'],
#            loc='best')


# #方法一，利用关键字
# from matplotlib import pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
#
# #定义坐标轴
# fig = plt.figure()
# ax1 = plt.axes(projection='3d')
# #ax = fig.add_subplot(111,projection='3d')  #这种方法也可以画多个子图
#
#
# #方法二，利用三维轴方法
# from matplotlib import pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
#
# #定义图像和三维格式坐标轴
# fig = plt.figure()
# ax2 = Axes3D(fig)


x = [Pe_initial_buff[0], r_e[0, 0]]
y = [Pe_initial_buff[1], r_e[1, 0]]
z = [Pe_initial_buff[2], r_e[2, 0]]

fig = plt.figure(figsize=(6, 6))
# ax1 = plt.axes(projection='3d')
# ax = fig.gca(projection='3d')
ax = fig.add_subplot(111, projection='3d')  # 这种方法也可以画多个子图
ax.plot3D(Pe_x, Pe_y, Pe_z, 'r')  # 绘制空间曲线
# ax.plot3D(x, y, z, c='g')

ax.quiver(Pe_initial_buff[0], Pe_initial_buff[1], Pe_initial_buff[2],
          r_e[0, 0] - Pe_initial_buff[0], r_e[1, 0] - Pe_initial_buff[1], r_e[2, 0] - Pe_initial_buff[2],
          arrow_length_ratio=0.05)

ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

plt.show()
